
char	*find_executable(char *cmd, t_list *env)
{
	char	**paths;
	char	*path_env;
	char	*candidate;
	int		i;

	if (!cmd)
	return (NULL);
	path_env = ft_getenv("PATH");
	if (!path_env || ft_strchr(cmd, '/'))
		return (!access(cmd, X_OK) ? ft_strdup(cmd) : NULL);
	paths = ft_split(path_env, ':');
	if (!paths)
		return (NULL);
	i = -1;
	while (paths[++i])
	{
		candidate = ft_strjoin(paths[i], "/");
		candidate = ft_strjoin_free(candidate, cmd);
		if (!access(candidate, X_OK))
		{
			ft_free_tab((void **)paths, ft_strslen(paths));
			return (candidate);
		}
		free(candidate);
	}
	ft_free_tab((void **)paths, ft_strslen(paths));
	return (NULL);
}

void	exec_external(t_cmd *cmd, t_data *data)
{
	pid_t	pid;
	char	*path;

	path = find_executable(cmd->args[0], data->env);
	if (!path)
	{
		printf("minishell: %s: command not found\n", cmd->args[0]);
		exit(127);
	}
	pid = fork();
	if (!pid)
	{
		execve(path, cmd->args, (char **)data->env);
		perror("execve failed");
		exit(1);
	}
	else
		waitpid(pid, NULL, 0);
	free(path);
}

void	exec_one(t_list *cmds, t_data *data)
{
	t_cmd *cmd = (t_cmd *)cmds->content;

	if (is_builtin(cmd))
		exec_builtin(cmd, data);
	else
		exec_external(cmd, data);
}

void	exec_child(t_list *cmds, int nb_cmds, t_data *data)
{
	int		i = 0;
	int		pipe_fd[2];
	int		in_fd = 0;
	pid_t	pid;
	t_list	*tmp = cmds;

	while (tmp)
	{
		t_cmd *cmd = (t_cmd *)tmp->content;

		if (i < nb_cmds - 1 && pipe(pipe_fd) == -1)
			//ft_perror cleardata exit
		if (pid < 0)
			//ft_perror cleardata exit
		pid = fork();
		if (pid == 0)
		{
			if (i > 0)
			{
				dup2(in_fd, 0);
				close(in_fd);
			}
			if (i < nb_cmds - 1)
			{
				close(pipe_fd[0]);
				dup2(pipe_fd[1], 1);
				close(pipe_fd[1]);
			}
			if (is_builtin(cmd))
				exec_builtin(cmd, data);
			else
				exec_external(cmd, data);
			exit(0);
		}

		if (i > 0)
			close(in_fd);
		if (i < nb_cmds - 1)
		{
			close(pipe_fd[1]);
			in_fd = pipe_fd[0];
		}
		tmp = tmp->next;
		i++;
	}
	while (wait(NULL) > 0);
}

void	executing(t_list *cmds, t_data *data)
{
	int nb_cmds;

	nb_cmds = ft_lstsize(cmds);
	if (nb_cmds == 1)
		exec_one(cmds, data);
	else
		exec_child(cmds, nb_cmds, data);
}